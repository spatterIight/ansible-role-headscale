# SPDX-FileCopyrightText: 2025 Slavi Pantaleev
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
- name: Ensure Headscale paths exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0750"
    owner: "{{ headscale_uid }}"
    group: "{{ headscale_gid }}"
  with_items:
    - "{{ headscale_base_path }}"
    - "{{ headscale_bin_path }}"
    - "{{ headscale_config_path }}"
    - "{{ headscale_data_path }}"

- name: Ensure Headscale configuration file installed
  ansible.builtin.copy:
    content: "{{ headscale_configuration | to_nice_yaml(indent=2, width=999999) }}"
    dest: "{{ headscale_config_path }}/config.yaml"
    mode: "0644"
    owner: "{{ headscale_uid }}"
    group: "{{ headscale_gid }}"

- name: Ensure Headscale extra-records.json file exists
  ansible.builtin.copy:
    content: "[]"
    dest: "{{ headscale_extra_records_path }}"
    mode: "0644"
    owner: "{{ headscale_uid }}"
    group: "{{ headscale_gid }}"
    force: false # Only modify/create the file if it doesn't already exist
  when: headscale_extra_records_path

- name: Ensure Headscale support files installed
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ headscale_uid }}"
    group: "{{ headscale_gid }}"
  with_items:
    - src: "{{ role_path }}/templates/env.j2"
      dest: "{{ headscale_base_path }}/env"
      mode: "0640"
    - src: "{{ role_path }}/templates/labels.j2"
      dest: "{{ headscale_base_path }}/labels"
      mode: "0640"
    - src: "{{ role_path }}/templates/bin/headscale.j2"
      dest: "{{ headscale_bin_path }}/headscale"
      mode: "0755"

- name: Ensure Headscale container image is pulled via community.docker.docker_image
  when: devture_systemd_docker_base_container_image_pull_method == 'ansible-module'
  community.docker.docker_image:
    name: "{{ headscale_container_image }}"
    source: "{{ 'pull' if ansible_version.major > 2 or ansible_version.minor > 7 else omit }}"
    force_source: "{{ headscale_container_image_force_pull if ansible_version.major > 2 or ansible_version.minor >= 8 else omit }}"
    force: "{{ omit if ansible_version.major > 2 or ansible_version.minor >= 8 else headscale_container_image_force_pull }}"
  register: result
  retries: "{{ devture_playbook_help_container_retries_count }}"
  delay: "{{ devture_playbook_help_container_retries_delay }}"
  until: result is not failed

- name: Ensure Headscale container image is pulled via ansible.builtin.command
  when: devture_systemd_docker_base_container_image_pull_method == 'command'
  ansible.builtin.command:
    cmd: "{{ devture_systemd_docker_base_host_command_docker }} pull {{ headscale_container_image }}"
  register: result
  retries: "{{ devture_playbook_help_container_retries_count }}"
  delay: "{{ devture_playbook_help_container_retries_delay }}"
  until: result is not failed
  changed_when: "'Downloaded newer image' in result.stdout"

- name: Run if 'host' network is not specified to be used
  when: headscale_container_network != 'host'
  block:
    - name: Ensure Headscale container network is created via community.docker.docker_network
      when: devture_systemd_docker_base_container_network_creation_method == 'ansible-module'
      community.docker.docker_network:
        enable_ipv6: "{{ devture_systemd_docker_base_ipv6_enabled }}"
        name: "{{ headscale_container_network }}"
        driver: bridge
        driver_options: "{{ devture_systemd_docker_base_container_networks_driver_options }}"

    - name: Ensure Headscale container network is created via ansible.builtin.command
      when: devture_systemd_docker_base_container_network_creation_method == 'command'
      ansible.builtin.command:
        cmd: >-
          {{ devture_systemd_docker_base_host_command_docker }} network create
          {% if devture_systemd_docker_base_ipv6_enabled %}--ipv6{% endif %}
          {{ devture_systemd_docker_base_container_networks_driver_options_string }}
          {{ headscale_container_network }}
      register: network_creation_result
      changed_when: network_creation_result.rc == 0
      failed_when: network_creation_result.rc != 0 and 'already exists' not in network_creation_result.stderr

- name: Ensure Headscale systemd service is present
  ansible.builtin.template:
    src: "{{ role_path }}/templates/systemd/headscale.service.j2"
    dest: "{{ devture_systemd_docker_base_systemd_path }}/{{ headscale_identifier }}.service"
    mode: "0644"
